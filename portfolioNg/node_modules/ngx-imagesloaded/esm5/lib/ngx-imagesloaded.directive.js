/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import imagesLoaded from 'imagesloaded';
var NgxImagesloadedDirective = /** @class */ (function () {
    //
    function NgxImagesloadedDirective(el) {
        this.el = el;
        //
        this.always = new EventEmitter();
        //
        this.done = new EventEmitter();
        //
        this.fail = new EventEmitter();
        //
        this.progress = new EventEmitter();
    }
    //
    /**
     * @return {?}
     */
    NgxImagesloadedDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.instance = imagesLoaded(this.el.nativeElement, this.options, function (instance) {
            _this.always.emit(instance);
        });
        this.instance.on('always', function (instance) { return _this.always.emit(instance); });
        this.instance.on('done', function (instance) { return _this.always.emit(instance); });
        this.instance.on('fail', function (instance) { return _this.always.emit(instance); });
        this.instance.on('progress', function (instance, image) {
            return _this.always.emit({ instance: instance, image: image });
        });
    };
    //
    /**
     * @return {?}
     */
    NgxImagesloadedDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.instance.off('always', function (instance) { return _this.always.emit(instance); });
        this.instance.off('doffe', function (instance) { return _this.always.emit(instance); });
        this.instance.off('fail', function (instance) { return _this.always.emit(instance); });
        this.instance.off('progress', function (instance, image) {
            return _this.always.emit({ instance: instance, image: image });
        });
    };
    NgxImagesloadedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[imagesLoaded]'
                },] },
    ];
    /** @nocollapse */
    NgxImagesloadedDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgxImagesloadedDirective.propDecorators = {
        always: [{ type: Output }],
        done: [{ type: Output }],
        fail: [{ type: Output }],
        progress: [{ type: Output }],
        options: [{ type: Input }]
    };
    return NgxImagesloadedDirective;
}());
export { NgxImagesloadedDirective };
function NgxImagesloadedDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxImagesloadedDirective.prototype.always;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.done;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.fail;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.progress;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.options;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.instance;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.el;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlc2xvYWRlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW1hZ2VzbG9hZGVkLyIsInNvdXJjZXMiOlsibGliL25neC1pbWFnZXNsb2FkZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxZQUFZLE1BQU0sY0FBYyxDQUFDOztJQWlDdEMsRUFBRTtJQUNGLGtDQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTs7c0JBekJHLElBQUksWUFBWSxFQUFFOztvQkFJcEIsSUFBSSxZQUFZLEVBQUU7O29CQUlsQixJQUFJLFlBQVksRUFBRTs7d0JBT2hELElBQUksWUFBWSxFQUFFO0tBVWU7SUFFdEMsRUFBRTs7OztJQUNGLDJDQUFROzs7SUFBUjtRQUFBLGlCQWVDO1FBZEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQzFCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUNyQixJQUFJLENBQUMsT0FBTyxFQUNaLFVBQUEsUUFBUTtZQUNOLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzVCLENBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFBLFFBQVEsSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQUEsUUFBUSxJQUFJLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTFCLENBQTBCLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFDLFFBQVEsRUFBRSxLQUFLO1lBQzNDLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO1FBQXJDLENBQXFDLENBQ3RDLENBQUM7S0FDSDtJQUVELEVBQUU7Ozs7SUFDRiw4Q0FBVzs7O0lBQVg7UUFBQSxpQkFPQztRQU5DLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFBLFFBQVEsSUFBSSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQUEsUUFBUSxJQUFJLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQTFCLENBQTBCLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFDLFFBQVEsRUFBRSxLQUFLO1lBQzVDLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO1FBQXJDLENBQXFDLENBQ3RDLENBQUM7S0FDSDs7Z0JBM0RGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7OztnQkFObUIsVUFBVTs7O3lCQVMzQixNQUFNO3VCQUlOLE1BQU07dUJBSU4sTUFBTTsyQkFJTixNQUFNOzBCQU9OLEtBQUs7O21DQTVCUjs7U0FPYSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBpbWFnZXNMb2FkZWQgZnJvbSAnaW1hZ2VzbG9hZGVkJztcbmltcG9ydCB7IE5neEltYWdlc2xvYWRlZE9wdGlvbnMgfSBmcm9tICcuL25neC1pbWFnZXNsb2FkZWQtb3B0aW9ucyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tpbWFnZXNMb2FkZWRdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hJbWFnZXNsb2FkZWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIC8vXG4gIEBPdXRwdXQoKVxuICBhbHdheXM6IEV2ZW50RW1pdHRlcjxpbWFnZXNMb2FkZWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8vXG4gIEBPdXRwdXQoKVxuICBkb25lOiBFdmVudEVtaXR0ZXI8aW1hZ2VzTG9hZGVkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvL1xuICBAT3V0cHV0KClcbiAgZmFpbDogRXZlbnRFbWl0dGVyPGltYWdlc0xvYWRlZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy9cbiAgQE91dHB1dCgpXG4gIHByb2dyZXNzOiBFdmVudEVtaXR0ZXI8e1xuICAgIGluc3RhbmNlOiBpbWFnZXNMb2FkZWQ7XG4gICAgaW1hZ2U6IGFueTtcbiAgfT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy9cbiAgQElucHV0KClcbiAgb3B0aW9uczogTmd4SW1hZ2VzbG9hZGVkT3B0aW9ucztcblxuICAvL1xuICBwcml2YXRlIGluc3RhbmNlOiBpbWFnZXNMb2FkZWQ7XG5cbiAgLy9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge31cblxuICAvL1xuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmluc3RhbmNlID0gaW1hZ2VzTG9hZGVkKFxuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LFxuICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgaW5zdGFuY2UgPT4ge1xuICAgICAgICB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdGhpcy5pbnN0YW5jZS5vbignYWx3YXlzJywgaW5zdGFuY2UgPT4gdGhpcy5hbHdheXMuZW1pdChpbnN0YW5jZSkpO1xuICAgIHRoaXMuaW5zdGFuY2Uub24oJ2RvbmUnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vbignZmFpbCcsIGluc3RhbmNlID0+IHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpKTtcbiAgICB0aGlzLmluc3RhbmNlLm9uKCdwcm9ncmVzcycsIChpbnN0YW5jZSwgaW1hZ2UpID0+XG4gICAgICB0aGlzLmFsd2F5cy5lbWl0KHsgaW5zdGFuY2UsIGltYWdlIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8vXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuaW5zdGFuY2Uub2ZmKCdhbHdheXMnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vZmYoJ2RvZmZlJywgaW5zdGFuY2UgPT4gdGhpcy5hbHdheXMuZW1pdChpbnN0YW5jZSkpO1xuICAgIHRoaXMuaW5zdGFuY2Uub2ZmKCdmYWlsJywgaW5zdGFuY2UgPT4gdGhpcy5hbHdheXMuZW1pdChpbnN0YW5jZSkpO1xuICAgIHRoaXMuaW5zdGFuY2Uub2ZmKCdwcm9ncmVzcycsIChpbnN0YW5jZSwgaW1hZ2UpID0+XG4gICAgICB0aGlzLmFsd2F5cy5lbWl0KHsgaW5zdGFuY2UsIGltYWdlIH0pXG4gICAgKTtcbiAgfVxufVxuIl19