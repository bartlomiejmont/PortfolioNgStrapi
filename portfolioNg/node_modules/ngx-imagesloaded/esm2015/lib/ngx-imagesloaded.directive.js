/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import imagesLoaded from 'imagesloaded';
export class NgxImagesloadedDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        //
        this.always = new EventEmitter();
        //
        this.done = new EventEmitter();
        //
        this.fail = new EventEmitter();
        //
        this.progress = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.instance = imagesLoaded(this.el.nativeElement, this.options, instance => {
            this.always.emit(instance);
        });
        this.instance.on('always', instance => this.always.emit(instance));
        this.instance.on('done', instance => this.always.emit(instance));
        this.instance.on('fail', instance => this.always.emit(instance));
        this.instance.on('progress', (instance, image) => this.always.emit({ instance, image }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.instance.off('always', instance => this.always.emit(instance));
        this.instance.off('doffe', instance => this.always.emit(instance));
        this.instance.off('fail', instance => this.always.emit(instance));
        this.instance.off('progress', (instance, image) => this.always.emit({ instance, image }));
    }
}
NgxImagesloadedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[imagesLoaded]'
            },] },
];
/** @nocollapse */
NgxImagesloadedDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgxImagesloadedDirective.propDecorators = {
    always: [{ type: Output }],
    done: [{ type: Output }],
    fail: [{ type: Output }],
    progress: [{ type: Output }],
    options: [{ type: Input }]
};
function NgxImagesloadedDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxImagesloadedDirective.prototype.always;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.done;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.fail;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.progress;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.options;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.instance;
    /** @type {?} */
    NgxImagesloadedDirective.prototype.el;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlc2xvYWRlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtaW1hZ2VzbG9hZGVkLyIsInNvdXJjZXMiOlsibGliL25neC1pbWFnZXNsb2FkZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxZQUFZLE1BQU0sY0FBYyxDQUFDO0FBTXhDLE1BQU07Ozs7SUE0QkosWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7O3NCQXpCRyxJQUFJLFlBQVksRUFBRTs7b0JBSXBCLElBQUksWUFBWSxFQUFFOztvQkFJbEIsSUFBSSxZQUFZLEVBQUU7O3dCQU9oRCxJQUFJLFlBQVksRUFBRTtLQVVlOzs7O0lBR3RDLFFBQVE7UUFDTixJQUFJLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQ3JCLElBQUksQ0FBQyxPQUFPLEVBQ1osUUFBUSxDQUFDLEVBQUU7WUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM1QixDQUNGLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FDL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FDdEMsQ0FBQztLQUNIOzs7O0lBR0QsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUN0QyxDQUFDO0tBQ0g7OztZQTNERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjthQUMzQjs7OztZQU5tQixVQUFVOzs7cUJBUzNCLE1BQU07bUJBSU4sTUFBTTttQkFJTixNQUFNO3VCQUlOLE1BQU07c0JBT04sS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGltYWdlc0xvYWRlZCBmcm9tICdpbWFnZXNsb2FkZWQnO1xuaW1wb3J0IHsgTmd4SW1hZ2VzbG9hZGVkT3B0aW9ucyB9IGZyb20gJy4vbmd4LWltYWdlc2xvYWRlZC1vcHRpb25zJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ltYWdlc0xvYWRlZF0nXG59KVxuZXhwb3J0IGNsYXNzIE5neEltYWdlc2xvYWRlZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLy9cbiAgQE91dHB1dCgpXG4gIGFsd2F5czogRXZlbnRFbWl0dGVyPGltYWdlc0xvYWRlZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy9cbiAgQE91dHB1dCgpXG4gIGRvbmU6IEV2ZW50RW1pdHRlcjxpbWFnZXNMb2FkZWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8vXG4gIEBPdXRwdXQoKVxuICBmYWlsOiBFdmVudEVtaXR0ZXI8aW1hZ2VzTG9hZGVkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvL1xuICBAT3V0cHV0KClcbiAgcHJvZ3Jlc3M6IEV2ZW50RW1pdHRlcjx7XG4gICAgaW5zdGFuY2U6IGltYWdlc0xvYWRlZDtcbiAgICBpbWFnZTogYW55O1xuICB9PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvL1xuICBASW5wdXQoKVxuICBvcHRpb25zOiBOZ3hJbWFnZXNsb2FkZWRPcHRpb25zO1xuXG4gIC8vXG4gIHByaXZhdGUgaW5zdGFuY2U6IGltYWdlc0xvYWRlZDtcblxuICAvL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIC8vXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBpbWFnZXNMb2FkZWQoXG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICBpbnN0YW5jZSA9PiB7XG4gICAgICAgIHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpO1xuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLmluc3RhbmNlLm9uKCdhbHdheXMnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vbignZG9uZScsIGluc3RhbmNlID0+IHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpKTtcbiAgICB0aGlzLmluc3RhbmNlLm9uKCdmYWlsJywgaW5zdGFuY2UgPT4gdGhpcy5hbHdheXMuZW1pdChpbnN0YW5jZSkpO1xuICAgIHRoaXMuaW5zdGFuY2Uub24oJ3Byb2dyZXNzJywgKGluc3RhbmNlLCBpbWFnZSkgPT5cbiAgICAgIHRoaXMuYWx3YXlzLmVtaXQoeyBpbnN0YW5jZSwgaW1hZ2UgfSlcbiAgICApO1xuICB9XG5cbiAgLy9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5pbnN0YW5jZS5vZmYoJ2Fsd2F5cycsIGluc3RhbmNlID0+IHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpKTtcbiAgICB0aGlzLmluc3RhbmNlLm9mZignZG9mZmUnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vZmYoJ2ZhaWwnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vZmYoJ3Byb2dyZXNzJywgKGluc3RhbmNlLCBpbWFnZSkgPT5cbiAgICAgIHRoaXMuYWx3YXlzLmVtaXQoeyBpbnN0YW5jZSwgaW1hZ2UgfSlcbiAgICApO1xuICB9XG59XG4iXX0=