(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('imagesloaded')) :
    typeof define === 'function' && define.amd ? define('ngx-imagesloaded', ['exports', '@angular/core', 'imagesloaded'], factory) :
    (factory((global['ngx-imagesloaded'] = {}),global.ng.core,null));
}(this, (function (exports,i0,imagesLoaded) { 'use strict';

    imagesLoaded = imagesLoaded && imagesLoaded.hasOwnProperty('default') ? imagesLoaded['default'] : imagesLoaded;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxImagesloadedService = (function () {
        function NgxImagesloadedService() {
        }
        NgxImagesloadedService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        NgxImagesloadedService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxImagesloadedService.ngInjectableDef = i0.defineInjectable({ factory: function NgxImagesloadedService_Factory() { return new NgxImagesloadedService(); }, token: NgxImagesloadedService, providedIn: "root" });
        return NgxImagesloadedService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxImagesloadedDirective = (function () {
        //
        function NgxImagesloadedDirective(el) {
            this.el = el;
            //
            this.always = new i0.EventEmitter();
            //
            this.done = new i0.EventEmitter();
            //
            this.fail = new i0.EventEmitter();
            //
            this.progress = new i0.EventEmitter();
        }
        //
        /**
         * @return {?}
         */
        NgxImagesloadedDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.instance = imagesLoaded(this.el.nativeElement, this.options, function (instance) {
                    _this.always.emit(instance);
                });
                this.instance.on('always', function (instance) { return _this.always.emit(instance); });
                this.instance.on('done', function (instance) { return _this.always.emit(instance); });
                this.instance.on('fail', function (instance) { return _this.always.emit(instance); });
                this.instance.on('progress', function (instance, image) {
                    return _this.always.emit({ instance: instance, image: image });
                });
            };
        //
        /**
         * @return {?}
         */
        NgxImagesloadedDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.instance.off('always', function (instance) { return _this.always.emit(instance); });
                this.instance.off('doffe', function (instance) { return _this.always.emit(instance); });
                this.instance.off('fail', function (instance) { return _this.always.emit(instance); });
                this.instance.off('progress', function (instance, image) {
                    return _this.always.emit({ instance: instance, image: image });
                });
            };
        NgxImagesloadedDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[imagesLoaded]'
                    },] },
        ];
        /** @nocollapse */
        NgxImagesloadedDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef }
            ];
        };
        NgxImagesloadedDirective.propDecorators = {
            always: [{ type: i0.Output }],
            done: [{ type: i0.Output }],
            fail: [{ type: i0.Output }],
            progress: [{ type: i0.Output }],
            options: [{ type: i0.Input }]
        };
        return NgxImagesloadedDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxImagesloadedModule = (function () {
        function NgxImagesloadedModule() {
        }
        NgxImagesloadedModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NgxImagesloadedDirective],
                        exports: [NgxImagesloadedDirective],
                        providers: [NgxImagesloadedService]
                    },] },
        ];
        return NgxImagesloadedModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxImagesloadedService = NgxImagesloadedService;
    exports.NgxImagesloadedModule = NgxImagesloadedModule;
    exports.Éµa = NgxImagesloadedDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlc2xvYWRlZC51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1pbWFnZXNsb2FkZWQvbGliL25neC1pbWFnZXNsb2FkZWQuc2VydmljZS50cyIsIm5nOi8vbmd4LWltYWdlc2xvYWRlZC9saWIvbmd4LWltYWdlc2xvYWRlZC5kaXJlY3RpdmUudHMiLCJuZzovL25neC1pbWFnZXNsb2FkZWQvbGliL25neC1pbWFnZXNsb2FkZWQubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4SW1hZ2VzbG9hZGVkU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IGltYWdlc0xvYWRlZCBmcm9tICdpbWFnZXNsb2FkZWQnO1xuaW1wb3J0IHsgTmd4SW1hZ2VzbG9hZGVkT3B0aW9ucyB9IGZyb20gJy4vbmd4LWltYWdlc2xvYWRlZC1vcHRpb25zJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ltYWdlc0xvYWRlZF0nXG59KVxuZXhwb3J0IGNsYXNzIE5neEltYWdlc2xvYWRlZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLy9cbiAgQE91dHB1dCgpXG4gIGFsd2F5czogRXZlbnRFbWl0dGVyPGltYWdlc0xvYWRlZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy9cbiAgQE91dHB1dCgpXG4gIGRvbmU6IEV2ZW50RW1pdHRlcjxpbWFnZXNMb2FkZWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8vXG4gIEBPdXRwdXQoKVxuICBmYWlsOiBFdmVudEVtaXR0ZXI8aW1hZ2VzTG9hZGVkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvL1xuICBAT3V0cHV0KClcbiAgcHJvZ3Jlc3M6IEV2ZW50RW1pdHRlcjx7XG4gICAgaW5zdGFuY2U6IGltYWdlc0xvYWRlZDtcbiAgICBpbWFnZTogYW55O1xuICB9PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvL1xuICBASW5wdXQoKVxuICBvcHRpb25zOiBOZ3hJbWFnZXNsb2FkZWRPcHRpb25zO1xuXG4gIC8vXG4gIHByaXZhdGUgaW5zdGFuY2U6IGltYWdlc0xvYWRlZDtcblxuICAvL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIC8vXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBpbWFnZXNMb2FkZWQoXG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICBpbnN0YW5jZSA9PiB7XG4gICAgICAgIHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpO1xuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLmluc3RhbmNlLm9uKCdhbHdheXMnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vbignZG9uZScsIGluc3RhbmNlID0+IHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpKTtcbiAgICB0aGlzLmluc3RhbmNlLm9uKCdmYWlsJywgaW5zdGFuY2UgPT4gdGhpcy5hbHdheXMuZW1pdChpbnN0YW5jZSkpO1xuICAgIHRoaXMuaW5zdGFuY2Uub24oJ3Byb2dyZXNzJywgKGluc3RhbmNlLCBpbWFnZSkgPT5cbiAgICAgIHRoaXMuYWx3YXlzLmVtaXQoeyBpbnN0YW5jZSwgaW1hZ2UgfSlcbiAgICApO1xuICB9XG5cbiAgLy9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5pbnN0YW5jZS5vZmYoJ2Fsd2F5cycsIGluc3RhbmNlID0+IHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpKTtcbiAgICB0aGlzLmluc3RhbmNlLm9mZignZG9mZmUnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vZmYoJ2ZhaWwnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vZmYoJ3Byb2dyZXNzJywgKGluc3RhbmNlLCBpbWFnZSkgPT5cbiAgICAgIHRoaXMuYWx3YXlzLmVtaXQoeyBpbnN0YW5jZSwgaW1hZ2UgfSlcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4SW1hZ2VzbG9hZGVkRGlyZWN0aXZlIH0gZnJvbSAnLi9uZ3gtaW1hZ2VzbG9hZGVkLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ3hJbWFnZXNsb2FkZWRTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtaW1hZ2VzbG9hZGVkLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtOZ3hJbWFnZXNsb2FkZWREaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmd4SW1hZ2VzbG9hZGVkRGlyZWN0aXZlXSxcbiAgcHJvdmlkZXJzOiBbTmd4SW1hZ2VzbG9hZGVkU2VydmljZV1cbn0pXG5leHBvcnQgY2xhc3MgTmd4SW1hZ2VzbG9hZGVkTW9kdWxlIHt9XG4iXSwibmFtZXMiOlsiSW5qZWN0YWJsZSIsIkV2ZW50RW1pdHRlciIsIkRpcmVjdGl2ZSIsIkVsZW1lbnRSZWYiLCJPdXRwdXQiLCJJbnB1dCIsIk5nTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtRQU9FO1NBQWlCOztvQkFMbEJBLGFBQVUsU0FBQzt3QkFDVixVQUFVLEVBQUUsTUFBTTtxQkFDbkI7Ozs7O3FDQUpEOzs7Ozs7O0FD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