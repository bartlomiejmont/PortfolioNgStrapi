import { Injectable, Directive, ElementRef, EventEmitter, Input, Output, NgModule, defineInjectable } from '@angular/core';
import imagesLoaded from 'imagesloaded';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxImagesloadedService {
    constructor() { }
}
NgxImagesloadedService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxImagesloadedService.ctorParameters = () => [];
/** @nocollapse */ NgxImagesloadedService.ngInjectableDef = defineInjectable({ factory: function NgxImagesloadedService_Factory() { return new NgxImagesloadedService(); }, token: NgxImagesloadedService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxImagesloadedDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        //
        this.always = new EventEmitter();
        //
        this.done = new EventEmitter();
        //
        this.fail = new EventEmitter();
        //
        this.progress = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.instance = imagesLoaded(this.el.nativeElement, this.options, instance => {
            this.always.emit(instance);
        });
        this.instance.on('always', instance => this.always.emit(instance));
        this.instance.on('done', instance => this.always.emit(instance));
        this.instance.on('fail', instance => this.always.emit(instance));
        this.instance.on('progress', (instance, image) => this.always.emit({ instance, image }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.instance.off('always', instance => this.always.emit(instance));
        this.instance.off('doffe', instance => this.always.emit(instance));
        this.instance.off('fail', instance => this.always.emit(instance));
        this.instance.off('progress', (instance, image) => this.always.emit({ instance, image }));
    }
}
NgxImagesloadedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[imagesLoaded]'
            },] },
];
/** @nocollapse */
NgxImagesloadedDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgxImagesloadedDirective.propDecorators = {
    always: [{ type: Output }],
    done: [{ type: Output }],
    fail: [{ type: Output }],
    progress: [{ type: Output }],
    options: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxImagesloadedModule {
}
NgxImagesloadedModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgxImagesloadedDirective],
                exports: [NgxImagesloadedDirective],
                providers: [NgxImagesloadedService]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxImagesloadedService, NgxImagesloadedModule, NgxImagesloadedDirective as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlc2xvYWRlZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LWltYWdlc2xvYWRlZC9saWIvbmd4LWltYWdlc2xvYWRlZC5zZXJ2aWNlLnRzIiwibmc6Ly9uZ3gtaW1hZ2VzbG9hZGVkL2xpYi9uZ3gtaW1hZ2VzbG9hZGVkLmRpcmVjdGl2ZS50cyIsIm5nOi8vbmd4LWltYWdlc2xvYWRlZC9saWIvbmd4LWltYWdlc2xvYWRlZC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hJbWFnZXNsb2FkZWRTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgaW1hZ2VzTG9hZGVkIGZyb20gJ2ltYWdlc2xvYWRlZCc7XG5pbXBvcnQgeyBOZ3hJbWFnZXNsb2FkZWRPcHRpb25zIH0gZnJvbSAnLi9uZ3gtaW1hZ2VzbG9hZGVkLW9wdGlvbnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW1hZ2VzTG9hZGVkXSdcbn0pXG5leHBvcnQgY2xhc3MgTmd4SW1hZ2VzbG9hZGVkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAvL1xuICBAT3V0cHV0KClcbiAgYWx3YXlzOiBFdmVudEVtaXR0ZXI8aW1hZ2VzTG9hZGVkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvL1xuICBAT3V0cHV0KClcbiAgZG9uZTogRXZlbnRFbWl0dGVyPGltYWdlc0xvYWRlZD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy9cbiAgQE91dHB1dCgpXG4gIGZhaWw6IEV2ZW50RW1pdHRlcjxpbWFnZXNMb2FkZWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8vXG4gIEBPdXRwdXQoKVxuICBwcm9ncmVzczogRXZlbnRFbWl0dGVyPHtcbiAgICBpbnN0YW5jZTogaW1hZ2VzTG9hZGVkO1xuICAgIGltYWdlOiBhbnk7XG4gIH0+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8vXG4gIEBJbnB1dCgpXG4gIG9wdGlvbnM6IE5neEltYWdlc2xvYWRlZE9wdGlvbnM7XG5cbiAgLy9cbiAgcHJpdmF0ZSBpbnN0YW5jZTogaW1hZ2VzTG9hZGVkO1xuXG4gIC8vXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG5cbiAgLy9cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pbnN0YW5jZSA9IGltYWdlc0xvYWRlZChcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudCxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIGluc3RhbmNlID0+IHtcbiAgICAgICAgdGhpcy5hbHdheXMuZW1pdChpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuaW5zdGFuY2Uub24oJ2Fsd2F5cycsIGluc3RhbmNlID0+IHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpKTtcbiAgICB0aGlzLmluc3RhbmNlLm9uKCdkb25lJywgaW5zdGFuY2UgPT4gdGhpcy5hbHdheXMuZW1pdChpbnN0YW5jZSkpO1xuICAgIHRoaXMuaW5zdGFuY2Uub24oJ2ZhaWwnLCBpbnN0YW5jZSA9PiB0aGlzLmFsd2F5cy5lbWl0KGluc3RhbmNlKSk7XG4gICAgdGhpcy5pbnN0YW5jZS5vbigncHJvZ3Jlc3MnLCAoaW5zdGFuY2UsIGltYWdlKSA9PlxuICAgICAgdGhpcy5hbHdheXMuZW1pdCh7IGluc3RhbmNlLCBpbWFnZSB9KVxuICAgICk7XG4gIH1cblxuICAvL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmluc3RhbmNlLm9mZignYWx3YXlzJywgaW5zdGFuY2UgPT4gdGhpcy5hbHdheXMuZW1pdChpbnN0YW5jZSkpO1xuICAgIHRoaXMuaW5zdGFuY2Uub2ZmKCdkb2ZmZScsIGluc3RhbmNlID0+IHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpKTtcbiAgICB0aGlzLmluc3RhbmNlLm9mZignZmFpbCcsIGluc3RhbmNlID0+IHRoaXMuYWx3YXlzLmVtaXQoaW5zdGFuY2UpKTtcbiAgICB0aGlzLmluc3RhbmNlLm9mZigncHJvZ3Jlc3MnLCAoaW5zdGFuY2UsIGltYWdlKSA9PlxuICAgICAgdGhpcy5hbHdheXMuZW1pdCh7IGluc3RhbmNlLCBpbWFnZSB9KVxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hJbWFnZXNsb2FkZWREaXJlY3RpdmUgfSBmcm9tICcuL25neC1pbWFnZXNsb2FkZWQuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5neEltYWdlc2xvYWRlZFNlcnZpY2UgfSBmcm9tICcuL25neC1pbWFnZXNsb2FkZWQuc2VydmljZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05neEltYWdlc2xvYWRlZERpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtOZ3hJbWFnZXNsb2FkZWREaXJlY3RpdmVdLFxuICBwcm92aWRlcnM6IFtOZ3hJbWFnZXNsb2FkZWRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hJbWFnZXNsb2FkZWRNb2R1bGUge31cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7SUFPRSxpQkFBaUI7OztZQUxsQixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7Ozs7Ozs7QUNKRDs7OztJQW1DRSxZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTs7c0JBekJHLElBQUksWUFBWSxFQUFFOztvQkFJcEIsSUFBSSxZQUFZLEVBQUU7O29CQUlsQixJQUFJLFlBQVksRUFBRTs7d0JBT2hELElBQUksWUFBWSxFQUFFO0tBVWU7Ozs7SUFHdEMsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUMxQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDckIsSUFBSSxDQUFDLE9BQU8sRUFDWixRQUFRO1lBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDNUIsQ0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssS0FDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FDdEMsQ0FBQztLQUNIOzs7O0lBR0QsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQ3RDLENBQUM7S0FDSDs7O1lBM0RGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzNCOzs7O1lBTm1CLFVBQVU7OztxQkFTM0IsTUFBTTttQkFJTixNQUFNO21CQUlOLE1BQU07dUJBSU4sTUFBTTtzQkFPTixLQUFLOzs7Ozs7O0FDNUJSOzs7WUFJQyxRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsd0JBQXdCLENBQUM7Z0JBQ3hDLE9BQU8sRUFBRSxDQUFDLHdCQUF3QixDQUFDO2dCQUNuQyxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzthQUNwQzs7Ozs7Ozs7Ozs7Ozs7OyJ9