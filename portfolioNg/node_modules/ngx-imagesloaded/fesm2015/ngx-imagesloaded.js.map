{"version":3,"file":"ngx-imagesloaded.js.map","sources":["ng://ngx-imagesloaded/lib/ngx-imagesloaded.service.ts","ng://ngx-imagesloaded/lib/ngx-imagesloaded.directive.ts","ng://ngx-imagesloaded/lib/ngx-imagesloaded.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxImagesloadedService {\n\n  constructor() { }\n}\n","import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport imagesLoaded from 'imagesloaded';\nimport { NgxImagesloadedOptions } from './ngx-imagesloaded-options';\n\n@Directive({\n  selector: '[imagesLoaded]'\n})\nexport class NgxImagesloadedDirective implements OnInit, OnDestroy {\n  //\n  @Output()\n  always: EventEmitter<imagesLoaded> = new EventEmitter();\n\n  //\n  @Output()\n  done: EventEmitter<imagesLoaded> = new EventEmitter();\n\n  //\n  @Output()\n  fail: EventEmitter<imagesLoaded> = new EventEmitter();\n\n  //\n  @Output()\n  progress: EventEmitter<{\n    instance: imagesLoaded;\n    image: any;\n  }> = new EventEmitter();\n\n  //\n  @Input()\n  options: NgxImagesloadedOptions;\n\n  //\n  private instance: imagesLoaded;\n\n  //\n  constructor(private el: ElementRef) {}\n\n  //\n  ngOnInit() {\n    this.instance = imagesLoaded(\n      this.el.nativeElement,\n      this.options,\n      instance => {\n        this.always.emit(instance);\n      }\n    );\n\n    this.instance.on('always', instance => this.always.emit(instance));\n    this.instance.on('done', instance => this.always.emit(instance));\n    this.instance.on('fail', instance => this.always.emit(instance));\n    this.instance.on('progress', (instance, image) =>\n      this.always.emit({ instance, image })\n    );\n  }\n\n  //\n  ngOnDestroy() {\n    this.instance.off('always', instance => this.always.emit(instance));\n    this.instance.off('doffe', instance => this.always.emit(instance));\n    this.instance.off('fail', instance => this.always.emit(instance));\n    this.instance.off('progress', (instance, image) =>\n      this.always.emit({ instance, image })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxImagesloadedDirective } from './ngx-imagesloaded.directive';\nimport { NgxImagesloadedService } from './ngx-imagesloaded.service';\n\n@NgModule({\n  declarations: [NgxImagesloadedDirective],\n  exports: [NgxImagesloadedDirective],\n  providers: [NgxImagesloadedService]\n})\nexport class NgxImagesloadedModule {}\n"],"names":[],"mappings":";;;;;;;AAAA;IAOE,iBAAiB;;;YALlB,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;ACJD;;;;IAmCE,YAAoB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;;sBAzBG,IAAI,YAAY,EAAE;;oBAIpB,IAAI,YAAY,EAAE;;oBAIlB,IAAI,YAAY,EAAE;;wBAOhD,IAAI,YAAY,EAAE;KAUe;;;;IAGtC,QAAQ;QACN,IAAI,CAAC,QAAQ,GAAG,YAAY,CAC1B,IAAI,CAAC,EAAE,CAAC,aAAa,EACrB,IAAI,CAAC,OAAO,EACZ,QAAQ;YACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5B,CACF,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,KAAK,KAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CACtC,CAAC;KACH;;;;IAGD,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,KAAK,KAC5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CACtC,CAAC;KACH;;;YA3DF,SAAS,SAAC;gBACT,QAAQ,EAAE,gBAAgB;aAC3B;;;;YANmB,UAAU;;;qBAS3B,MAAM;mBAIN,MAAM;mBAIN,MAAM;uBAIN,MAAM;sBAON,KAAK;;;;;;;AC5BR;;;YAIC,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,wBAAwB,CAAC;gBACxC,OAAO,EAAE,CAAC,wBAAwB,CAAC;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;;"}
